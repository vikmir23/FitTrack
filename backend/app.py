import os
from flask import Flask, request, jsonify
from firebase_admin import credentials, firestore, initialize_app
from datetime import datetime
from objects import User, Workout

#initialize Flask app

app = Flask(__name__)

#initialize Firebase Database
cred = credentials.Certificate('SecretKey.json')
default_app = initialize_app(cred)
db = firestore.client()
workouts_ref = db.collection(u'workout')
test_ref = db.collection(u'TESTING')
user_ref = db.collection(u'users')

#base
@app.route('/')
def base():
 return '<h1>Yeah, this is Fittrack</h1>'

#test endpoint
@app.route('/test', methods = ['GET'])
def test():
    try:
        data = test_ref.stream()
        ret = [d.to_dict() for d in data]
        return jsonify(ret), 200
        
    except Exception as e:
        return f"An Error Occured: {e}"

'''
Workout schema
    id: string (generated by firebase)
    userId: string (authId of the user)
    date: dateTime (refers to date and time of workout)
    activities: list (activities performed)
        each element in list contains
        activity: string
        reps: int
        intensity: int
'''
#workout endpoints
@app.route('/workouts/addWorkout', methods = ["POST"])
def addWorkout():
    try:
        data = request.get_json(force = True)
        data["dateAdded"] = datetime.now()
        workouts_ref.add(data)
        return jsonify({"success": True}), 200
    except Exception as e:
        return f"An Error Occurred: {e}"

@app.route('/workouts/allWorkouts', methods = ['GET'])
def getAllWorkouts():
    try:
        data = workouts_ref.stream()
        ret = [d.to_dict() for d in data]
        return jsonify(ret), 200
    except Exception as e:
        return f"An Error Occurred: {e}"

@app.route('/workouts/user/<userId>', methods = ["GET"])
def getWorkouts(userId):
    try:
        data = workouts_ref.where("userId", '==', userId).stream()

        ret = [d.to_dict() for d in data]
        return jsonify(ret), 200
    except Exception as e:
        return f"An Error Occurred: {e}"



#TODO
#create PUT endpoint to edit workouts


'''
User schema
id: string (generated by firebase)
authId: string (id given to user on login)
gender: string
age: number
height: number
weight: number
goal: number
'''

'''
for the case getting users, perform a join between workouts and users on authId/userId
'''

#user endpoints
@app.route('/user/addUser', methods = ['POST'])
def addUser():
    try:
        data = request.json
        user_ref.add(data)
        return jsonify({"success": True}), 200
    except Exception as e:
        return f"An Error Occured: {e}"

@app.route('/user/getUser/<authId>', methods = ['GET'])
def getUser(authId):
    try:
        data = user_ref.where("authId", "==", authId).get()
        workoutData = workouts_ref.where("userId", "==", authId).stream()

        wList = [w.to_dict() for w in workoutData]

        ret = data.to_dict()

        ret["workouts"] = wList
        
        return jsonify(ret), 200
    except Exception as e:
        return f"An Error Occured: {e}"

@app.route('/user/editUser/<authId>')
def editUser(authId):
    try:
        pass
    except Exception as e:
        return f"An Error Occured: {e}"


@app.route('/user/recWorkout/<authId>', methods=['GET'])
def getWorkoutRec(authId):
    try:
        data = user_ref.where("authId", "==", authId).get()
        workoutData = workouts_ref.where("userId", "==", authId).stream()

        wList = [w.to_dict() for w in workoutData]

        uData = data.to_dict()

        user = User(authId, uData["gender"], uData["age"], uData["height"], uData["weight"], uData["goal"])

        user.setUserWorkouts(wList)

        # rec = user.getWorkoutRec()
        rec = user
        return jsonify(rec), 200



    except Exception as e:
        return f"An Error Occurred: {e}"



port = int(os.environ.get('PORT', 8080))
if __name__ == '__main__':
    app.run(threaded=True, host='0.0.0.0', port=port)
